# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

"An object with an ID"
interface Node {
    "The ID of the object."
    id: ID!
}

type AccountMutation {
    changePassword(passwordNew: String!, passwordOld: String!): ChangePassword
    login(password: String!, username: String!): ObtainOTP
    register(email: String!, firstName: String!, lastName: String!, username: String!): Register
    resendOTP(pk: String!): ResendOTP
    validOTP(otp: String, pk: String): ValidOTP
}

type ActivityConnection {
    "Contains the nodes in this connection."
    edges: [ActivityEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
}

"A Relay edge containing a `Activity` and its cursor."
type ActivityEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: ActivityLogNode
}

type ActivityLogNode implements Node {
    codeDocument: String
    data: AutoCamelCasedScalar
    dateCreated: DateTime!
    dateModified: DateTime!
    docId: UUID
    docName: String
    "The ID of the object."
    id: ID!
    isActive: Boolean!
    nodeId: UUID
    nodeName: String
    nodeType: LogActivityLogNodeTypeChoices!
    reason: String
    remarks: String!
    userCreated: UserNode
}

type AddKeyBundle {
    errors: ExpectedErrorType
    result: AutoCamelCasedScalar
    success: Boolean
}

type AddSignedPreKey {
    errors: ExpectedErrorType
    result: AutoCamelCasedScalar
    success: Boolean
}

type AddThread {
    errors: ExpectedErrorType
    result: AutoCamelCasedScalar
    success: Boolean
}

type AuthorizationLogNode implements Node {
    data: AutoCamelCasedScalar
    dateCreated: DateTime!
    dateModified: DateTime!
    "The ID of the object."
    id: ID!
    isActive: Boolean!
    remarks: String!
    userCreated: UUID
}

type AuthorizeLogConnection {
    "Contains the nodes in this connection."
    edges: [AuthorizeLogEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
}

"A Relay edge containing a `AuthorizeLog` and its cursor."
type AuthorizeLogEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: AuthorizationLogNode
}

type CallSignaling {
    errors: ExpectedErrorType
    result: AutoCamelCasedScalar
    success: Boolean
}

type CallSignalingSubscription {
    event: AutoCamelCasedScalar
}

type ChangePassword {
    errors: ExpectedErrorType
    result: AutoCamelCasedScalar
    success: Boolean
}

type CreateDeviceToken {
    errors: ExpectedErrorType
    result: AutoCamelCasedScalar
    success: Boolean
}

type DeviceInfoConnection {
    "Contains the nodes in this connection."
    edges: [DeviceInfoEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
}

"A Relay edge containing a `DeviceInfo` and its cursor."
type DeviceInfoEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: DeviceInfoType
}

type DeviceInfoType implements Node {
    apnId: String
    createdDate: Date!
    fetchesMessages: Boolean!
    gcmId: String
    "The ID of the object."
    id: ID!
    isMaster: Boolean!
    isStale: Boolean!
    lastSeen: DateTime!
    name: String
    pushTimeStamp: DateTime!
    registrationId: Int!
    salt: String
    signedPreKey: SignedPreKeyType
    token: String
    user: UserViewType!
    voidApnId: String
}

type DeviceInfoView {
    id: UUID!
    lastSeen: DateTime!
    pk: UUID
    registrationId: Int!
}

"Debugging information for the current query."
type DjangoDebug {
    "Executed SQL queries for this API query."
    sql: [DjangoDebugSQL]
}

"Represents a single database query made to a Django managed DB."
type DjangoDebugSQL {
    "The Django database alias (e.g. 'default')."
    alias: String!
    "Duration of this database query in seconds."
    duration: Float!
    "Postgres connection encoding if available."
    encoding: String
    "Whether this database query was a SELECT."
    isSelect: Boolean!
    "Whether this database query took more than 10 seconds."
    isSlow: Boolean!
    "Postgres isolation level if available."
    isoLevel: String
    "JSON encoded database query parameters."
    params: String!
    "The raw SQL of this query, without params."
    rawSql: String!
    "The actual SQL sent to this database."
    sql: String
    "Start time of this database query."
    startTime: Float!
    "Stop time of this database query."
    stopTime: Float!
    "Postgres transaction ID if available."
    transId: String
    "Postgres transaction status if available."
    transStatus: String
    "The type of database being used (e.g. postrgesql, mysql, sqlite)."
    vendor: String!
}

type FriendOnlineConnection {
    "Contains the nodes in this connection."
    edges: [FriendOnlineEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
}

"A Relay edge containing a `FriendOnline` and its cursor."
type FriendOnlineEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: FriendOnlineType
}

type FriendOnlineSubscription {
    event: OnlineEvent
}

type FriendOnlineType implements Node {
    "The ID of the object."
    id: ID!
    status: String
    userId: UUID
}

type FriendRequestConnection {
    "Contains the nodes in this connection."
    edges: [FriendRequestEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
}

"A Relay edge containing a `FriendRequest` and its cursor."
type FriendRequestEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: FriendRequestType
}

type FriendRequestSubscription {
    event: AutoCamelCasedScalar
}

type FriendRequestType implements Node {
    avatar: String
    firstName: String
    "The ID of the object."
    id: ID!
    lastName: String
    pk: UUID
    timestamp: DateTime
    type: String
}

type HistoryLogConnection {
    "Contains the nodes in this connection."
    edges: [HistoryLogEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
}

"A Relay edge containing a `HistoryLog` and its cursor."
type HistoryLogEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: HistoryLogNode
}

type HistoryLogNode implements Node {
    activityName: LogHistoryLogActivityNameChoices!
    codeDocument: String
    dateCreated: DateTime!
    docChange: AutoCamelCasedScalar
    docDetail: AutoCamelCasedScalar
    docId: UUID
    docName: String
    docNew: AutoCamelCasedScalar
    "The ID of the object."
    id: ID!
    isActive: Boolean!
    remarks: String
    userCreated: UUID
}

type LogQuery {
    activities(after: String, before: String, first: Int, last: Int): ActivityConnection
    authorize(after: String, before: String, first: Int, last: Int): AuthorizeLogConnection
    histories(after: String, before: String, first: Int, last: Int): HistoryLogConnection
}

type MeetingType {
    answers: AutoCamelCasedScalar
    hasVideo: Boolean
    members: [AutoCamelCasedScalar]
    offers: AutoCamelCasedScalar
    pk: UUID
}

type MemberViewType {
    id: UUID!
    info: UserViewType
    isBlocked: Boolean!
    isMuted: Boolean!
    joinedDate: DateTime!
    pk: UUID
}

type MessageEventType {
    data: [AutoCamelCasedScalar]
    type: EVENT_TYPE
}

type MessengerMutation {
    addKeyBundles(identityKey: String!, preKeys: [PreKeyInput], registrationId: String!, signedPreKey: SignedPreKeyInput!): AddKeyBundle
    addSignedPreKey(registrationId: String!): AddSignedPreKey
    addThread(isEncrypt: Boolean!, memberIds: [UUID]!, name: String): AddThread
    callSignaling(hasVideo: Boolean, meetingId: UUID, signalType: String!, userId: UUID): CallSignaling
    createDeviceToken(registrationId: String!): CreateDeviceToken
    processFriendRequest(isAccept: String!, senderId: String!): ProcessFriendRequest
    removeContact(userId: String!): RemoveContact
    removeDevice(registrationId: String!): RemoveDevice
    seenSignal(messageIds: [UUID]!, threadId: UUID!): SeenMessages
    sendFriendRequest(recipientId: String!): SendFriendRequest
    sendMessage(files: Upload, messages: [MessageInput]!): SendMessage
    updateDeviceInfo(apnId: String, gcmId: String, voidApnId: String): UpdateDeviceInfo
    updateUserInfo(discoverableByPhoneNumber: Boolean, dob: Date, fistName: String, gender: GENDER, language: LANG, lastName: String, phone: String): UpdateUserInfo
    verifyDeviceToken(deviceName: String!, otp: String!, password: String!, registrationId: String!): VerifyDeviceToken
}

type MessengerQuery {
    contacts(after: String, before: String, first: Int, last: Int): UserViewConnection
    friendRequest(after: String, before: String, first: Int, last: Int): FriendRequestConnection
    friendsOnline(after: String, before: String, first: Int, last: Int): FriendOnlineConnection
    getAllDevice(after: String, before: String, first: Int, last: Int): DeviceInfoConnection
    getCurrentDevice: DeviceInfoType
    getDeviceByUserId(userId: UUID): [DeviceInfoView]
    getDeviceKeys(deviceId: String, userId: UUID): PreKeyResponseType
    getMeeting(meetingId: UUID!): MeetingType
    getOnlineStatus(userId: UUID!): FriendOnlineType
    getSignedPreKey(deviceId: UUID): SignedPreKeyType
    getStatus(deviceId: UUID): PreKeyCount
    searchContacts(after: String, before: String, first: Int, keyword: String, last: Int): UserViewConnection
    thread(id: UUID!): ThreadType
    threadByUserIds(userIds: [UUID]!): ThreadType
    threadList(after: String, before: String, first: Int, ids: [UUID]!, last: Int): ThreadTypeConnectionsConnection
}

type MessengerSubscription {
    event: MessageEventType!
}

type Mutation {
    account: AccountMutation
    messenger: MessengerMutation
}

type ObtainOTP {
    errors: ExpectedErrorType
    result: AutoCamelCasedScalar
    success: Boolean
}

type OnlineEvent {
    status: ONLINE_TYPE
    userId: UUID
}

"The Relay compliant `PageInfo` type, containing data necessary to paginate this connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

type PreKeyCount {
    count: Int
}

type PreKeyItemType {
    deviceId: String
    preKey: PreKeyType
    registrationId: Int
    signedPreKey: SignedPreKeyType
}

type PreKeyResponseType {
    devices: [PreKeyItemType]
    identityKey: String
}

type PreKeyType {
    id: Int
    publicKey: String
}

type PrivateChannelSubscription {
    event: MessageEventType!
}

type ProcessFriendRequest {
    errors: ExpectedErrorType
    result: AutoCamelCasedScalar
    success: Boolean
}

type Query {
    __debug: DjangoDebug
    logs: LogQuery
    messenger: MessengerQuery
    user: UserQuery
}

type Register {
    errors: ExpectedErrorType
    result: AutoCamelCasedScalar
    success: Boolean
}

type RemoveContact {
    errors: ExpectedErrorType
    result: AutoCamelCasedScalar
    success: Boolean
}

type RemoveDevice {
    errors: ExpectedErrorType
    result: AutoCamelCasedScalar
    success: Boolean
}

type ResendOTP {
    errors: ExpectedErrorType
    result: AutoCamelCasedScalar
    success: Boolean
}

type SeenMessages {
    errors: ExpectedErrorType
    result: AutoCamelCasedScalar
    success: Boolean
}

type SendFriendRequest {
    errors: ExpectedErrorType
    result: AutoCamelCasedScalar
    success: Boolean
}

type SendMessage {
    errors: ExpectedErrorType
    result: AutoCamelCasedScalar
    success: Boolean
}

type SignedPreKeyType {
    id: Int!
    publicKey: String!
    signature: String!
}

type Subscription {
    callSignaling(meetingId: UUID!): CallSignalingSubscription
    friendOnline(registrationId: Int, threadId: UUID, token: String): FriendOnlineSubscription
    friendRequest(registrationId: Int, threadId: UUID, token: String): FriendRequestSubscription
    incomingMessage(registrationId: Int, threadId: UUID, token: String): MessengerSubscription
    privateChannel(registrationId: Int, threadId: UUID, token: String): PrivateChannelSubscription
}

type ThreadType implements Node {
    dateCreated: DateTime!
    extras: AutoCamelCasedScalar
    icon: String
    "The ID of the object."
    id: ID!
    isEncrypted: Boolean!
    leader: UserViewType
    members: [MemberViewType]
    name: String
    pk: UUID
}

type ThreadTypeConnectionsConnection {
    "Contains the nodes in this connection."
    edges: [ThreadTypeConnectionsEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
}

"A Relay edge containing a `ThreadTypeConnections` and its cursor."
type ThreadTypeConnectionsEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: ThreadType
}

type UpdateDeviceInfo {
    errors: ExpectedErrorType
    result: AutoCamelCasedScalar
    success: Boolean
}

type UpdateUserInfo {
    errors: ExpectedErrorType
    result: AutoCamelCasedScalar
    success: Boolean
}

type UserInfoType {
    avatar: String
    contactStatus: String
    dateJoined: DateTime!
    dob: Date
    email: String
    firstName: String
    gender: AccountUserGenderChoices
    isActive: Boolean!
    isEmail: Boolean!
    isPhone: Boolean!
    language: AccountUserLanguageChoices
    lastName: String
    phone: String
    pk: UUID
    status: String
    "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
    username: String!
}

type UserNode implements Node {
    avatar: String
    dateJoined: DateTime!
    dob: Date
    email: String
    firstName: String
    gender: AccountUserGenderChoices
    "The ID of the object."
    id: ID!
    isActive: Boolean!
    isEmail: Boolean!
    isPhone: Boolean!
    language: AccountUserLanguageChoices
    lastName: String
    phone: String
    pk: UUID
    "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
    username: String!
}

type UserNodeConnection {
    "Contains the nodes in this connection."
    edges: [UserNodeEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
}

"A Relay edge containing a `UserNode` and its cursor."
type UserNodeEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: UserNode
}

type UserQuery {
    findUser(after: String, before: String, email: String, first: Int, firstName: String, last: Int, lastName: String, offset: Int, phone: String, username: String): UserNodeConnection
    me: UserNode
    userInfo(id: UUID!): UserInfoType
}

type UserViewConnection {
    "Contains the nodes in this connection."
    edges: [UserViewEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
}

"A Relay edge containing a `UserView` and its cursor."
type UserViewEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: UserViewType
}

type UserViewType implements Node {
    avatar: String
    dateJoined: DateTime!
    dob: Date
    firstName: String
    gender: AccountUserGenderChoices
    "The ID of the object."
    id: ID!
    lastName: String
    pk: UUID
    "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
    username: String!
}

type ValidOTP {
    errors: ExpectedErrorType
    result: AutoCamelCasedScalar
    success: Boolean
}

type VerifyDeviceToken {
    errors: ExpectedErrorType
    result: AutoCamelCasedScalar
    success: Boolean
}

"An enumeration."
enum AccountUserGenderChoices {
    "Female"
    FEMALE
    "Male"
    MALE
}

"An enumeration."
enum AccountUserLanguageChoices {
    "English"
    EN
    "Vietnamese"
    VI
}

"An enumeration."
enum EVENT_TYPE {
    MessageDelivered
    NewMessage
    SeenMessage
}

"An enumeration."
enum GENDER {
    female
    male
}

"An enumeration."
enum LANG {
    en
    vi
}

"An enumeration."
enum LogActivityLogNodeTypeChoices {
    "System"
    A_0
    "Workflow"
    A_1
}

"An enumeration."
enum LogHistoryLogActivityNameChoices {
    "Cancel"
    CANCEL
    "Comment"
    COMMENT
    "Delete"
    DELETE
    "Edit"
    EDIT
    "Save"
    SAVE
    "Share"
    SHARE
    "System"
    SYSTEM
}

"An enumeration."
enum ONLINE_TYPE {
    Offline
    Online
}

"JSON as is, but converting object keys to and from camelCase automatically"
scalar AutoCamelCasedScalar

"""

The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"""

The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""

Errors messages and codes mapped to
fields or non fields errors.
Example:
{
field_name: [
{
"message": "error message",
"code": "error_code"
}
],
other_field: [
{
"message": "error message",
"code": "error_code"
}
],
nonFieldErrors: [
{
"message": "error message",
"code": "error_code"
}
]
}
"""
scalar ExpectedErrorType

"""

Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString

"""

Leverages the internal Python implmeentation of UUID (uuid.UUID) to provide native UUID objects
in fields, resolvers and input.
"""
scalar UUID

"""

Create scalar that ignores normal serialization/deserialization, since
that will be handled by the multipart request spec
"""
scalar Upload

input MessageInput {
    contents: String!
    createdBy: UUID!
    destinationDeviceId: UUID!
    extras: JSONString
    id: String!
    replyTo: UUID
    threadId: UUID!
}

input PreKeyInput {
    keyId: String!
    publicKey: String!
}

input SignedPreKeyInput {
    keyId: String!
    publicKey: String!
    signature: String!
}
